# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from data_node.api.v2 import trading_data_pb2 as data__node_dot_api_dot_v2_dot_trading__data__pb2


class TradingDataServiceStub(object):
    """-- Orders --
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.OrdersByMarket = channel.unary_unary(
                '/datanode.api.v2.TradingDataService/OrdersByMarket',
                request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.OrdersByMarketRequest.SerializeToString,
                response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.OrdersByMarketResponse.FromString,
                )
        self.OrderVersionsByID = channel.unary_unary(
                '/datanode.api.v2.TradingDataService/OrderVersionsByID',
                request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.OrderVersionsByIDRequest.SerializeToString,
                response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.OrderVersionsByIDResponse.FromString,
                )
        self.QueryBalanceHistory = channel.unary_unary(
                '/datanode.api.v2.TradingDataService/QueryBalanceHistory',
                request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.QueryBalanceHistoryRequest.SerializeToString,
                response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.QueryBalanceHistoryResponse.FromString,
                )
        self.GetMarketDataHistoryByID = channel.unary_unary(
                '/datanode.api.v2.TradingDataService/GetMarketDataHistoryByID',
                request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetMarketDataHistoryByIDRequest.SerializeToString,
                response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetMarketDataHistoryByIDResponse.FromString,
                )
        self.GetNetworkLimits = channel.unary_unary(
                '/datanode.api.v2.TradingDataService/GetNetworkLimits',
                request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetNetworkLimitsRequest.SerializeToString,
                response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetNetworkLimitsResponse.FromString,
                )
        self.Candles = channel.unary_unary(
                '/datanode.api.v2.TradingDataService/Candles',
                request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.CandlesRequest.SerializeToString,
                response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.CandlesResponse.FromString,
                )
        self.CandlesSubscribe = channel.unary_stream(
                '/datanode.api.v2.TradingDataService/CandlesSubscribe',
                request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.CandlesSubscribeRequest.SerializeToString,
                response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.CandlesSubscribeResponse.FromString,
                )


class TradingDataServiceServicer(object):
    """-- Orders --
    """

    def OrdersByMarket(self, request, context):
        """Get a list of Orders by Market
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OrderVersionsByID(self, request, context):
        """Get all versions of the order by its orderID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryBalanceHistory(self, request, context):
        """-- Balances --

        Get an aggregated list of the changes in balances in a set of accounts over time
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMarketDataHistoryByID(self, request, context):
        """-- Market Data --

        Get Market Data History for a Market ID between given dates
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNetworkLimits(self, request, context):
        """-- Network Limits --

        Get the current network limits (is bootstrapping finished, are proposals enabled etc..)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Candles(self, request, context):
        """-- Candles --

        Get a list of Candles by Market
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CandlesSubscribe(self, request, context):
        """Subscribe to a stream of Candles
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TradingDataServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'OrdersByMarket': grpc.unary_unary_rpc_method_handler(
                    servicer.OrdersByMarket,
                    request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.OrdersByMarketRequest.FromString,
                    response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.OrdersByMarketResponse.SerializeToString,
            ),
            'OrderVersionsByID': grpc.unary_unary_rpc_method_handler(
                    servicer.OrderVersionsByID,
                    request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.OrderVersionsByIDRequest.FromString,
                    response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.OrderVersionsByIDResponse.SerializeToString,
            ),
            'QueryBalanceHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryBalanceHistory,
                    request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.QueryBalanceHistoryRequest.FromString,
                    response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.QueryBalanceHistoryResponse.SerializeToString,
            ),
            'GetMarketDataHistoryByID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMarketDataHistoryByID,
                    request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetMarketDataHistoryByIDRequest.FromString,
                    response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetMarketDataHistoryByIDResponse.SerializeToString,
            ),
            'GetNetworkLimits': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNetworkLimits,
                    request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetNetworkLimitsRequest.FromString,
                    response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetNetworkLimitsResponse.SerializeToString,
            ),
            'Candles': grpc.unary_unary_rpc_method_handler(
                    servicer.Candles,
                    request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.CandlesRequest.FromString,
                    response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.CandlesResponse.SerializeToString,
            ),
            'CandlesSubscribe': grpc.unary_stream_rpc_method_handler(
                    servicer.CandlesSubscribe,
                    request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.CandlesSubscribeRequest.FromString,
                    response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.CandlesSubscribeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'datanode.api.v2.TradingDataService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TradingDataService(object):
    """-- Orders --
    """

    @staticmethod
    def OrdersByMarket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/datanode.api.v2.TradingDataService/OrdersByMarket',
            data__node_dot_api_dot_v2_dot_trading__data__pb2.OrdersByMarketRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.OrdersByMarketResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OrderVersionsByID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/datanode.api.v2.TradingDataService/OrderVersionsByID',
            data__node_dot_api_dot_v2_dot_trading__data__pb2.OrderVersionsByIDRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.OrderVersionsByIDResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryBalanceHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/datanode.api.v2.TradingDataService/QueryBalanceHistory',
            data__node_dot_api_dot_v2_dot_trading__data__pb2.QueryBalanceHistoryRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.QueryBalanceHistoryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMarketDataHistoryByID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/datanode.api.v2.TradingDataService/GetMarketDataHistoryByID',
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetMarketDataHistoryByIDRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetMarketDataHistoryByIDResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNetworkLimits(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/datanode.api.v2.TradingDataService/GetNetworkLimits',
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetNetworkLimitsRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetNetworkLimitsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Candles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/datanode.api.v2.TradingDataService/Candles',
            data__node_dot_api_dot_v2_dot_trading__data__pb2.CandlesRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.CandlesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CandlesSubscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/datanode.api.v2.TradingDataService/CandlesSubscribe',
            data__node_dot_api_dot_v2_dot_trading__data__pb2.CandlesSubscribeRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.CandlesSubscribeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
